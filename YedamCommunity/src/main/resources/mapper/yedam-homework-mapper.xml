<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.yedam.app.yedam_homework.mapper.HomeWorkMapper">

	<!-- 과제 전체조회 -->
	<select id="selectHomeworkAll" resultType="HomeWorkVO">
		SELECT	c.class_id,
				h.homework_id,
				h.homework_content,
				h.homework_date,
				h.homework_title,
				h.curriculum_id,
				s.subject_id,
				s.subject_name
		FROM homeworks h JOIN curriculum c ON (h.curriculum_id = c.curriculum_id)
						  JOIN subjects s ON (h.curriculum_id = s.curriculum_id)
		WHERE h.subject_id = s.subject_id
		ORDER BY  h.homework_id DESC
	</select>
	
	<!-- 학생별 과제 조회 -->
	<select id="selectUserHomework" resultType="HomeWorkVO">
		SELECT  h.homework_title,
        		h.homework_date,
        		h.homework_id,
        		c.class_id,
        		s.subject_name
		FROM    homeworks h JOIN curriculum c ON (h.curriculum_id = c.curriculum_id)
                			JOIN users u ON (c.curriculum_id = u.curriculum_id)
        		        	JOIN subjects s ON (s.curriculum_id = c.curriculum_id)
		WHERE   h.subject_id = s.subject_id AND user_id = #{userid}
		ORDER BY  h.homework_id DESC
	</select>

	<!-- 상세조회 -->
	<select id="selectHomework" resultType="HomeWorkVO">
	 SELECT h.homework_id,
		h.homework_content,
		h.homework_date,
		h.homework_title,
		h.curriculum_id,
		h.subject_id,
		t.homework_target_id
		FROM homeworks h JOIN homework_targets t ON (h.homework_id = t.homework_id)
		WHERE h.homework_id = #{homeworkId} 
	</select>

	<!-- 과목명 조회 -->
	<select id="selectSubjectName" resultType="HomeWorkVO">
		SELECT subject_name,
				subject_id
		FROM subjects
		WHERE curriculum_id = #{curriculumId}
	</select>

	<!-- 과제등록 -->
	<insert id="insertHomework" parameterType="HomeWorkVO">
		INSERT INTO homeworks
					(
					homework_id,
					homework_content,
					homework_date,
					homework_title,
					curriculum_id,
					subject_id
					)
		VALUES
					(
					homework_id_seq.nextval,
					#{homeworkContent},
					#{homeworkDate},
					#{homeworkTitle},
					#{curriculumId},
					#{subjectId}
					)
	</insert>
	
	<!-- 과제 삭제 -->
	<delete id="deleteHomework" parameterType="HomeWorkVO">
	DELETE FROM homeworks
	WHERE homework_id = #{homeworkId}
	</delete>
	
	<!-- 과제 대상자 등록 -->
	<insert id="insertHomeworkTarget" parameterType="HomeWorkTargetVO">
		INSERT INTO homework_targets
			(
			homework_target_id,
			homework_id,
			curriculum_id
			)
		VALUES
			(
			homework_target_id_seq.nextval,
			#{homeworkId},
			#{curriculumId}
			)
	</insert>
	
	<!-- 과제 대상자 조회 -->
	<select id="selectHomeworktarget" resultType="HomeWorkTargetVO">
		SELECT homework_id,
			curriculum_id
		FROM homeworks
		WHERE homework_id = ( SELECT max(homework_id)
								FROM homeworks
								WHERE curriculum_id = #{curriculumId})
	</select>
	
	<!-- 강의실 카테고리 -->
	<select id="selectClass" resultType="HomeWorkVO">
		SELECT	c.class_id,
				h.homework_id,
				h.homework_content,
				h.homework_date,
				h.homework_title,
				s.subject_name
		 FROM homeworks h JOIN curriculum c ON (h.curriculum_id = c.curriculum_id)
						  JOIN subjects s ON (h.curriculum_id = s.curriculum_id)
		WHERE h.subject_id = s.subject_id 
		<if test = "classId != 0">
		AND class_id = #{classId} 
		</if>
		ORDER BY  h.homework_id DESC
	</select>
	
	<!-- 과제 페이징 및 출력(교수) -->
	<select id="getHomeworksByFilter" parameterType="map" resultType="HomeWorkVO">
		SELECT *
	    FROM (
	        SELECT b.*, ROWNUM rnum
	        FROM (
	            SELECT c.class_id,
	                   h.homework_id,
	                   h.homework_content,
	                   h.homework_date,
	                   h.homework_title,
	                   s.subject_name
	            FROM homeworks h JOIN curriculum c ON h.curriculum_id = c.curriculum_id
	            				 JOIN subjects s ON h.subject_id = s.subject_id
	            WHERE (#{filter} = 0 OR c.class_id = #{filter})
	            AND LOWER(h.homework_title) LIKE '%' || #{searchQuery} || '%'
	            ORDER BY h.homework_id DESC
	        ) b
	        <![CDATA[
		    WHERE ROWNUM <= #{page} * 5
		    ]]>
	    )
	    WHERE rnum > (#{page} - 1) * 5
	</select>
	
	<!-- 과제 페이징 및 출력(학생) -->
	<select id="getHomeworksByFilterStudent" parameterType="map" resultType="HomeWorkVO">
		SELECT *
		FROM (
    			SELECT b.*, ROWNUM rnum
    			FROM (
        				SELECT c.class_id,
               				   h.homework_id,
               				   h.homework_content,
               				   h.homework_date,
			                   h.homework_title,
               				   s.subject_name
        				FROM homeworks h	JOIN curriculum c ON h.curriculum_id = c.curriculum_id
        									JOIN subjects s ON h.subject_id = s.subject_id
        									JOIN users u ON c.curriculum_id = u.curriculum_id
        				WHERE (#{filter} = 0 OR s.subject_id = #{filter})
        				AND LOWER(h.homework_title) LIKE '%' || #{searchQuery} || '%'
        				AND u.user_id = #{userId}
        				ORDER BY h.homework_id DESC
    					) b
    					<![CDATA[
    					WHERE ROWNUM <= #{page} * 5
    					]]>
			)
			WHERE rnum > (#{page} - 1) * 5
	</select>
	
	<!-- 페이징용 카운트 -->
	<select id="getTotalCnt" parameterType="map" resultType="int">
		<!--SELECT COUNT(*)
		FROM homeworks h 
		JOIN curriculum c ON (h.curriculum_id = c.curriculum_id)
		JOIN subjects s ON (h.curriculum_id = s.curriculum_id)
		WHERE h.subject_id = s.subject_id
		AND (homework_title LIKE '%' || #{searchQuery} || '%')
		<if test="filter != 0">
		AND c.curriculum_id = #{filter}
		</if>-->
		
		SELECT COUNT(*)
	    FROM homeworks h JOIN curriculum c ON h.curriculum_id = c.curriculum_id
	    				 JOIN subjects s ON h.subject_id = s.subject_id
	    WHERE LOWER(h.homework_title) LIKE '%' || #{searchQuery} || '%'
	    <if test="filter != 0">
	        AND c.class_id = #{filter}
	    </if>
	</select>
	
	<!-- 과목명 카테고리 -->
	<select id="selectSubject" resultType="HomeWorkVO">
		SELECT  c.class_id,
       			h.homework_id,
        		h.homework_title,
        		s.subject_name,
        		h.homework_date
		FROM    homeworks h JOIN curriculum c ON(h.curriculum_id = c.curriculum_id)
        		            JOIN subjects s ON(c.curriculum_id = s.curriculum_id)
                    		JOIN users u ON (s.curriculum_id = u.curriculum_id) 
		WHERE   h.subject_id = s.subject_id AND user_id = #{userId}
		<if test="subjectId != 0">
		 AND s.subject_id = #{subjectId}                     
		</if>
		ORDER BY  h.homework_id DESC
	</select>
	
	
	<!-- 최근 과제 목록 -->
	<select id="selectRecentHomework" resultType="HomeWorkVO">
		SELECT a.*
		FROM   (SELECT  a.homework_id
       					,a.homework_title
       					,a.subject_id
       					,a.homework_date
       					,d.name
       					,ROWNUM AS rn
				FROM    homeworks a 
		        		JOIN homework_targets b
		        		ON(a.homework_id = b.homework_id)
     		    		JOIN users d
                		ON(b.user_id = d.user_id)
				WHERE   b.user_id = #{userId}
				ORDER BY a.homework_date desc) a
		<![CDATA[
		WHERE   rn <= 5	]]>
	</select>
	
	<!-- 과제 수정 -->
	<update id="updateHomework" parameterType="HomeWorkVO">
		UPDATE homeworks
		SET homework_content = #{homeworkContent} , homework_date = #{homeworkDate} , homework_title = #{homeworkTitle}
		WHERE homework_id = #{homeworkId}
	</update>
</mapper>