<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.yedam_examstudent.mapper.CbtStudentMapper">
	<!-- 시험결과유무 -->
	<select id="isTestResult" resultType="int">
		SELECT  COUNT(b.result_id) AS result_id
        FROM    test_targets a
                JOIN exam_results b 
                ON(a.test_target_id = b.test_target_id)
        WHERE   a.user_id = #{userId}
        AND     a.test_id = #{testId} 
	</select>
	<!-- 피드백유무 -->
	<select id="isTestFeedback" resultType="ExamResultVO">
		SELECT  NVL(MAX(c.test_name),0) AS test_name
				,NVL(MAX(b.result_score),0) AS result_score
				,NVL(MAX(b.pass_score),0) AS pass_score
				,NVL(MAX(b.feedback),0) AS feedback
        FROM    test_targets a
                JOIN exam_results b 
                ON(a.test_target_id = b.test_target_id)
                JOIN tests c
                ON(a.test_id = c.test_id)
        WHERE   a.user_id = #{userId}
        AND     a.test_id = #{testId}
	</select>
	<!-- 재시험유무 -->
	<select id="isTestReexam" resultType="int">
		SELECT  NVL(MAX(b.is_reexam),2) AS is_reexam
        FROM    test_targets a
                JOIN exam_results b 
                ON(a.test_target_id = b.test_target_id)
        WHERE   a.user_id = #{userId}
        AND     a.test_id = #{testId}
	</select>
	<select id="selectTestSub" resultType="SubjectsVO">
		SELECT  DISTINCT subject_name
		FROM	tests
		WHERE	curriculum_id = (SELECT  curriculum_id
								 FROM	 users
								 WHERE	 user_id = #{userId})
	</select>
	<!-- 시험목록 페이징 -->
	<select id="selectTestListAll" parameterType="TestVO" resultType="TestVO">
		SELECT  b.*
  		FROM    (SELECT  a.* 
  						 ,ROWNUM AS rn
			  	 FROM    (SELECT  a.test_id
                				  ,a.test_date
                				  ,a.test_name
                				  ,a.subject_name
                				  ,c.name
        				  FROM    tests a 
                				  JOIN test_targets b
                				  ON(a.test_id = b.test_id)
                				  JOIN users c
                				  ON(b.user_id = c.user_id)
        				  <where>
        				  		b.user_id = #{userId}
        				  		<choose>
        				  			<when test="type == 'sub'">
        				  				AND  a.subject_name = #{filterData}
        				  			</when>	
        				  			<when test="type == 'search'">
        				  				AND  a.test_name LIKE '%' || #{filterData} || '%'
        				  			</when>
        				  		</choose>	
        				  </where>
        				  ORDER BY a.test_date DESC , a.test_id DESC) a ) b
    	WHERE   b.rn > (#{page} - 1) * 10 
    	<![CDATA[
    	AND     b.rn <= #{page} * 10 ]]>
	</select>
	<!-- 시험개수 -->
	<select id="selectTestListSize" resultType="int">
		SELECT  COUNT(a.test_id)
		FROM    tests a 
		        JOIN test_targets b
		        ON(a.test_id = b.test_id)
     		    JOIN users d
                ON(b.user_id = d.user_id)
		WHERE   b.user_id = #{userId}
	</select>
	
	
	
	
	
	<!-- 시험상세 정보 -->
	<select id="selectTestDetail" resultType="TestVO">
		WITH b as (SELECT test_id
		                  ,subject_id             
                          ,COUNT(quiz_id) as quizIdCnt
                          ,SUM(quiz_score) as quizScore
                   FROM quizbox
                   GROUP BY test_id
                            ,subject_id)    
		SELECT  a.test_id
		        ,a.test_content
		        ,a.test_time
		        ,a.test_date
		        ,a.test_name
		        ,b.subject_id
		        ,c.curriculum_name
		        ,quizIdCnt
		        ,quizScore
		FROM    tests a 
		        JOIN  b  
		        ON(a.test_id = b.test_id)
		        JOIN curriculum c   
		        ON(a.curriculum_id = c.curriculum_id)
		WHERE   a.test_id = #{testId}
	</select>
	<!-- 시험문제 랜덤 -->
	<select id="selectTestQuizRand" resultType="QuizboxVO">
        WITH a AS(
		SELECT  ROWNUM AS rn
        		,a.quiz_id
        		,b.test_id
        		,a.example_num
        		,b.quiz_score
		FROM    (SELECT  quiz_id, example_num
        		FROM     answers
        		ORDER BY quiz_id, DBMS_RANDOM.VALUE) a
        		JOIN quizbox b ON(a.quiz_id = b.quiz_id)
		WHERE   b.test_id = #{testId})
		SELECT  ROWNUM AS rn
        		,aa.quiz_id
        		,aa.test_id
        		,aa.one
        		,aa.two
        		,aa.three
        		,aa.four
        		,aa.five
        		,aa.quiz_score
		FROM    (SELECT a.quiz_id
						,a.test_id
                		,MAX(DECODE(MOD(a.rn,5), 1, a.example_num)) AS one
                		,MAX(DECODE(MOD(a.rn,5), 2, a.example_num)) AS two
                		,MAX(DECODE(MOD(a.rn,5), 3, a.example_num)) AS three
                		,MAX(DECODE(MOD(a.rn,5), 4, a.example_num)) AS four
                		,MAX(DECODE(MOD(a.rn,5), 0, a.example_num)) AS five
                		,a.quiz_score
        		FROM    a
        		GROUP BY a.quiz_id
        				 ,a.test_id
                 		 ,a.quiz_score) aa
	</select>
	<!-- 랜덤보기 등록 -->
	<insert id="insertTestQuizExample" parameterType="AnswerboxVO">
		DECLARE
    		v_answerbox_cnt NUMBER(5,0);
    		v_answerbox_id	NUMBER(5,0);
		BEGIN
			<!-- 보기유무 찾기 -->
    		SELECT  COUNT(answerbox_id)
    		INTO    v_answerbox_cnt
    		FROM    test_targets a
            		JOIN tests b ON(a.test_id = b.test_id)
            		JOIN answerbox c ON(b.test_id = c.test_id)
    		WHERE   a.user_id = #{userId}
    		AND		c.quiz_id = #{quizId};
    		<!-- 이미 보기가 있는 경우 -->
    		IF v_answerbox_cnt > 0 THEN
    			<!-- 보기 식별번호 찾기 -->
    			SELECT  answerbox_id
    			INTO	v_answerbox_id
    			FROM    test_targets a
            			JOIN tests b ON(a.test_id = b.test_id)
            			JOIN answerbox c ON(b.test_id = c.test_id)
    			WHERE   a.user_id = #{userId}
    			AND		c.quiz_id = #{quizId};
    			<!-- 랜덤보기 수정 -->
        		UPDATE  answerbox
        		SET		example_one = #{exampleOne},
        				example_two = #{exampleTwo},
        				example_three = #{exampleThree},
        				example_four = #{exampleFour},
        				example_five = #{exampleFive}
        		WHERE	answerbox_id = v_answerbox_id;
                COMMIT;
            ELSE    
            	<!-- 랜덤 보기 등록 -->
    			INSERT INTO answerbox(answerbox_id
							  	  	  ,example_one
							  	  	  ,example_two
							  	  	  ,example_three
							  	  	  ,example_four
							  	  	  ,example_five
							  	  	  ,quiz_id
							  	  	  ,test_id)
				VALUES(answerbox_id_seq.NEXTVAL
			  	   	   ,#{exampleOne}
			   	       ,#{exampleTwo}
			           ,#{exampleThree}
			           ,#{exampleFour}
			           ,#{exampleFive}
			           ,#{quizId}
			           ,#{testId});
				COMMIT;
    		END IF;
		END;
	</insert>
	
	
	
	
	<!-- 시험시작 기본정보 -->
	<select id="selectTestStart" resultType="TestVO">
		SELECT  DISTINCT a.test_id
		        ,a.test_time
		        ,a.test_name
		        ,b.subject_id
		        ,d.name
		FROM    tests a
				JOIN quizbox b
				ON(a.test_id = b.test_id)
				JOIN test_targets c
				ON(a.test_id = c.test_id)
				JOIN users d
				ON(c.user_id = d.user_id)
		WHERE   a.test_id = #{testId}
		AND     d.user_id = #{userId}
	</select>
	<!-- 시험시작 퀴즈 -->
	<select id="selectTestQuiz" resultType="QuizboxVO">
       	SELECT  d.quiz_id
        		,d.quiz_content
        		,d.quiz_score
        		,MAX(DECODE(b.example_one, c.example_num, c.text_content)) AS example_one
        		,MAX(DECODE(b.example_two, c.example_num, c.text_content)) AS example_two
        		,MAX(DECODE(b.example_three, c.example_num, c.text_content)) AS example_three
        		,MAX(DECODE(b.example_four, c.example_num, c.text_content)) AS example_four
        		,MAX(DECODE(b.example_five, c.example_num, c.text_content)) AS example_five
		FROM    tests a 
				JOIN answerbox b ON(a.test_id = b.test_id)
        		JOIN answers c ON(b.quiz_id = c.quiz_id)
        		JOIN quizbox d ON(c.quiz_id = d.quiz_id)
		WHERE   d.test_id = #{testId}
		AND		d.quiz_id = #{quizId}
		GROUP BY d.quiz_id
         		 ,d.quiz_content
         		 ,d.quiz_score
	</select>
	
	
	
	
	
	<!-- 시험 결과 정보 등록 - exam_results 테이블 -->
	<update id="insertTestResult" parameterType="ExamResultVO">
	<selectKey keyProperty="resultId" resultType="int" order="BEFORE">
		SELECT  result_id_seq.NEXTVAL
		FROM    DUAL
	</selectKey>
		DECLARE
			v_sub NUMBER(10); <!-- 과목번호 -->
    		v_target NUMBER(10); <!-- 시험대상자번호 -->
    		v_pscore NUMBER(10); <!-- 합격 점수 -->
    		v_rid_cnt NUMBER(10); <!-- 시험결과 개수 -->
    		v_rid NUMBER(10); <!-- 시험결과 개수 -->
		BEGIN
			<!-- 현재 시험의 기준점수, 대상자번호, 과목번호, 총점 가져오기 -->
			SELECT  DISTINCT a.pass_score, 
			        b.test_target_id, 
			        c.subject_id
			INTO    v_pscore, v_target, v_sub
			FROM    tests a 
					JOIN test_targets b
					ON (a.test_id = b.test_id)
					JOIN quizbox c 
					ON (b.test_id = c.test_id)
			WHERE   b.test_id = #{testId}
			AND     b.user_id = #{userId};
			<!-- 시험결과 존재여부 구하기 -->
			SELECT  COUNT(a.result_id)
			INTO    v_rid_cnt
        	FROM    exam_results a 
        			JOIN test_targets b 
        			ON(a.test_target_id = b.test_target_id)
        	WHERE   b.test_id = #{testId}
        	AND     b.user_id = #{userId};
        	<!-- 시험결과 존재여부 구하기 -->
        	IF v_rid_cnt = 0 THEN <!-- 처음 응시하는 경우 -->
        		<!-- 테이블에 시험결과 정보 등록하기 -->
				INSERT INTO exam_results(result_id
			                         	 ,subject_id
			                         	 ,pass_score
			                         	 ,test_target_id)
				VALUES(result_id_seq.NEXTVAL
			       	   ,v_sub
			      	   ,v_pscore
			           ,v_target);
				COMMIT;
			ELSE <!-- 재시험인 경우 -->
				<!-- 시험결과식별번호 구하기 -->
				SELECT  a.result_id
				INTO    v_rid
	        	FROM    exam_results a 
	        			JOIN test_targets b 
	        			ON(a.test_target_id = b.test_target_id)
	        	WHERE   b.test_id = #{testId}
	        	AND     b.user_id = #{userId};
				<!-- 이전 총점 바꾸기 -->
				UPDATE  exam_results
				SET     result_score = 0
				WHERE   result_id = v_rid;
				COMMIT;
    			<!-- 기존 답안 정보 삭제하기 -->
    			DELETE FROM test_results
    			WHERE result_id = v_rid;
    			COMMIT;
        	END IF;
		END;
	</update>
	<!-- 문제 제출 답안 저장 - test_results 테이블 -->
	<update id="insertTestSubmit" parameterType="TestResultVO">
		DECLARE
    		v_answer varchar2(50); <!-- 내 답안 -->
    		v_iscorrect NUMBER(10); <!-- 답안 정답 유무 -->
    		v_tid NUMBER(10); <!-- 시험대상자식별번호 -->
    		v_rid NUMBER(10); <!-- 시험결과식별번호 -->
		BEGIN
			<!-- 현재 문제의 원래 답안 가져오기 -->
    		SELECT  example_num
    		INTO    v_answer
    		FROM    answers
    		WHERE   quiz_id = #{quizId}
    		AND     example_answer = 1;
    		<!-- 시험대상자번호 가져오기 -->
    		SELECT  test_target_id
    		INTO	v_tid
    		FROM  	test_targets
    		WHERE   test_id = #{testId}
    		AND		user_id = #{userId};
    		<!-- 시험결과식별번호 가져오기 -->
    		SELECT  MAX(result_id) AS result_id
    		INTO    v_rid
    		FROM    exam_results a
    				JOIN test_targets b
    				ON(a.test_target_id = b.test_target_id)
    		WHERE 	b.test_id = #{testId}
    		AND     b.test_target_id = v_tid;
    		<!-- 정답 유무 비교 -->
			IF v_answer = #{testAnswer} THEN
        		v_iscorrect := 1;
    		ELSE
        		v_iscorrect := 0;
    		END IF;
			<!-- 한 문제씩 제출 답안 저장하기 -->
    		INSERT INTO test_results(test_result_id
		                         	 ,test_answer
		                         	 ,quiz_id
		                         	 ,is_correct
		                         	 ,user_id
		                         	 ,result_id)
    		VALUES(test_result_id_seq.NEXTVAL
		    	   ,#{testAnswer}
		    	   ,#{quizId}
		    	   ,v_iscorrect
		    	   ,#{userId}
		    	   ,v_rid);
    		COMMIT;
    	END;
	</update>
	<!-- 시험 결과 총점 업데이트 -->
	<update id="insertTestResultScore" parameterType="ExamResultVO">
		DECLARE
			v_rscore1 NUMBER(10,0); <!-- 전 총점 -->
			v_rscore2 NUMBER(10,0); <!-- 현 총점 -->
			v_pscore NUMBER(10,0); <!-- 합격점 -->
			v_rid NUMBER(10,0); <!-- 시험결과식별번호 -->
			v_isreexam NUMBER(10); <!-- 재시험유무 -->
		BEGIN
			<!-- 시험결과식별번호, 합격점 가져오기 -->
			SELECT  a.result_id, a.pass_score, a.result_score
			INTO   	v_rid, v_pscore, v_rscore1
			FROM    exam_results a
					JOIN test_targets b
					ON(a.test_target_id = b.test_target_id)
			WHERE   b.test_id = #{testId}
			AND		b.user_id = #{userId};
			<!-- 현 총점 가져오기 -->
			SELECT  SUM(CASE WHEN is_correct = 1 THEN b.quiz_score
			                                     ELSE 0 
			                                     END) AS result_score
			INTO    v_rscore2
			FROM    test_results a 
     				JOIN quizbox b 
     				ON(a.quiz_id = b.quiz_id)
			WHERE   a.result_id = v_rid
			AND		b.test_id = #{testId};
			<!-- 재시험유무 확인 -->
			IF v_rscore2 >= v_pscore THEN
				v_isreexam := 1;
			ELSE
			    v_isreexam := 0;
			END IF;
			<!-- 총점 등록 -->
			UPDATE  exam_results
			SET	    result_score = v_rscore2,
			        is_reexam = v_isreexam
			WHERE   result_id = v_rid;
			COMMIT;
		END;
	</update>
	
	
	
	
	
	<!-- 시험결과 기본정보 -->
	<select id="selectTestResult" resultType="ExamResultVO">
		SELECT  c.name
       			,d.subject_id
       			,a.result_score
       			,a.pass_score
       			,a.is_reexam
       			,d.subject_id
       			,b.test_id
       			,d.subject_name
		FROM    exam_results a 
				JOIN test_targets b 
				ON(a.test_target_id = b.test_target_id)
				JOIN users c 
				ON(b.user_id = c.user_id)
				JOIN subjects d
                ON(a.subject_id = d.subject_id)
		WHERE   b.user_id = #{userId}
		AND     b.test_id = #{testId}
	</select>
	<!-- 시험결과 문제 정보 -->
	<select id="selectTestResultQuiz" resultType="QuizboxVO">
        WITH e AS(
		SELECT  a.quiz_id
				,b.test_result_id
				,MAX(DECODE(a.example_answer, 1, a.example_num)) AS example_num
        		,MAX(DECODE(a.example_answer, 1, a.text_content)) AS text_content
        		,MAX(DECODE(a.example_num, b.test_answer, a.text_content)) AS answerContent
		FROM    answers a 
				JOIN test_results b ON(a.quiz_id = b.quiz_id)
		WHERE     b.result_id = (SELECT  result_id
                    		   FROM    test_targets a
                    		    	   JOIN exam_results b ON(a.test_target_id = b.test_target_id)
                    		   WHERE   a.user_id = #{userId}
                    		   AND 	   a.test_id = #{testId})
		GROUP BY a.quiz_id
				 ,b.test_result_id)
		,f AS(
		SELECT a.quiz_id
        		,MAX(DECODE(a.example_num, b.example_one, a.text_content)) AS oneContent
        		,MAX(DECODE(a.example_num, b.example_two, a.text_content)) AS twoContent
        		,MAX(DECODE(a.example_num, b.example_three, a.text_content)) AS threeContent
        		,MAX(DECODE(a.example_num, b.example_four, a.text_content)) AS fourContent
        		,MAX(DECODE(a.example_num, b.example_five, a.text_content)) AS fiveContent
		FROM 	answers a 
		        JOIN answerbox b ON(a.quiz_id = b.quiz_id)
		WHERE   b.test_id = #{testId}
		GROUP BY a.quiz_id)
		SELECT  a.quiz_id
				,e.test_result_id
		        ,a.quiz_content
		        ,a.quiz_score
		        ,b.quiz_solution
		        ,d.test_answer
		        ,d.is_correct
		        ,e.example_num
		        ,e.text_content
        		,e.answerContent
		        ,f.oneContent
		        ,f.twoContent
		        ,f.threeContent
		        ,f.fourContent
		        ,f.fiveContent
		FROM 	quizbox a 
		        JOIN quizes b ON(a.quiz_id = b.quiz_id)
		        JOIN test_results d ON(a.quiz_id = d.quiz_id)
		        JOIN e ON(a.quiz_id = e.quiz_id)
		        JOIN f ON(a.quiz_id = f.quiz_id)
		WHERE	a.test_id = #{testId}
		AND		d.result_id = (SELECT  b.result_id
		                       FROM    test_targets a 
		                               JOIN exam_results b ON(a.test_target_id = b.test_target_id)
		                       WHERE   a.user_id = #{userId}
		                       AND     a.test_id = #{testId})
		ORDER BY e.test_result_id
	</select>
</mapper>