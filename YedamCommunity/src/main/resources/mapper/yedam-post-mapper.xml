<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.yedam_post.mapper.PostMapper">


	<!-- 게시글 등록 - PL/SQL -->
    <insert id="insertPost" parameterType="PostVO" statementType="CALLABLE">
        <![CDATA[
    DECLARE
        v_post_id NUMBER;
        v_boardfile_id NUMBER;
    BEGIN
        SELECT post_id_seq.NEXTVAL 
        INTO v_post_id 
        FROM dual;

        INSERT INTO posts (post_id
                         , board_id
                         , user_id
                         , title
                         , post_content
                         , create_date
                         , writer
                         , post_view
                         , post_like
                         , update_date)
        VALUES (v_post_id
              , #{boardId}
              , #{userId}
              , #{title}
              , #{postContent}
              , SYSDATE
              , #{writer}
              , 0
              , 0
              , NULL);

        SELECT boardfile_id_seq.NEXTVAL 
        INTO v_boardfile_id 
        FROM dual;

        INSERT INTO boardfiles (boardfile_id
                              , board_id
                              , post_id
                              , boardfile_name
                              , boardfile_size
                              , boardfile_location
                              , boardfile_ext)
        VALUES (v_boardfile_id
              , #{boardId}
              , v_post_id
              , #{boardfileName,     jdbcType=VARCHAR}
              , #{boardfileSize,     jdbcType=BIGINT}
              , #{boardfileLocation, jdbcType=VARCHAR}
              , #{boardfileExt,      jdbcType=VARCHAR});
    END;
    ]]>
    </insert>

	<!-- 게시글 단건조회 -->
	<select id="getPostDetails" parameterType="int" resultType="PostVO">
		SELECT p.post_id,
		       p.board_id,
		       p.user_id,
               p.title,
               p.post_content,
               p.create_date,
               p.writer,
               p.update_date,
               p.post_view,
               p.post_like,
               b.boardfile_id,
               b.boardfile_name,
               b.boardfile_location
        FROM posts p LEFT JOIN boardfiles b 
        ON p.post_id = b.post_id
        WHERE p.post_id = #{postId}
        AND p.board_id = #{boardId}
	</select>
	
	<!-- 첨부 파일 조회 -->
  <select id="getBoardFiles" parameterType="map" resultType="com.yedam.app.yedam_post.service.BoardFilesVO">
    	SELECT b.boardfile_id,
               b.boardfile_name,
               b.boardfile_location,
               b.boardfile_size,
               b.boardfile_ext
    	FROM boardfiles b
   	 	WHERE b.post_id = #{postId}
      	AND b.board_id = #{boardId}
  </select>

	<!-- 게시글 수정 -->
	<update id="updatePost" parameterType="PostVO">
		UPDATE posts
		SET title =	#{title}
		  , post_content = #{postContent}
		  , update_date = #{updateDate}
		WHERE post_id = #{postId}
		AND board_id = #{boardId}
	</update>

	<!-- 삭제 -->
	<delete id="deletePost1" parameterType="int">
		DELETE FROM comments
        WHERE reply_id IN (SELECT reply_id
                           FROM replies
                           WHERE post_id = #{postId}
                           AND board_id = #{boardId})
	</delete>

	<delete id="deletePost2" parameterType="int">
		DELETE FROM replies
		WHERE post_id = #{postId}
		AND board_id = #{boardId}
	</delete>

	<delete id="deletePost3" parameterType="int">
		DELETE FROM boardfiles
		WHERE post_id = #{postId}
		AND board_id = #{boardId}
	</delete>

	<delete id="deletePost4" parameterType="int">
		DELETE FROM reports
		WHERE post_id = #{postId}
		AND board_id = #{boardId}
	</delete>
	
	<delete id="deletePost5" parameterType="int">
		DELETE FROM posts
		WHERE post_id = #{postId}
		AND board_id = #{boardId}
	</delete>
	
	<!-- 조회수 -->
	<update id="updatePostViewCNT" parameterType="PostVO">
		UPDATE posts
        SET    post_view = post_view + 1
        WHERE post_id = #{postId}
        AND board_id = #{boardId}
    </update>
    
    <!-- 추천수 조회 likes 테이블 -->
     <select id="likeCheck" parameterType="map" resultType="Integer">
    	SELECT count(post_like)
    	FROM board_likes
    	WHERE post_id = #{postId}
    	AND user_id = #{userId}
    </select> 
    
    <!-- 게시글 추천시 likes 테이블에 insert -->
    <insert id="insertLike" parameterType="PostVO">
    	INSERT INTO board_likes (like_id
    	                 , post_like 
                         , post_id
                         , user_id)	
		VALUES (like_id_seq.nextval
		      , 1
              , #{postId}
              , #{userId})
    </insert>
    
    <!-- 게시글 추천 취소했을시 boardlikes 테이블에서 Delete -->
    <delete id="deleteLike" parameterType="PostVO">
    	DELETE FROM board_likes
        WHERE post_id = #{postId}
        AND user_id = #{userId}
    </delete>
    
    <!-- 추천수 + 1 -->
    <update id="updatePostLikePlus" parameterType="int">
    	UPDATE posts
		SET post_like = post_like + 1
		WHERE post_id = #{postId}
    </update>
    
    <!-- 추천수 - 1 -->
    <update id="updatePostLikeMinus" parameterType="int">
    	UPDATE posts
		SET post_like = post_like - 1
		WHERE post_id = #{postId}
    </update>
    
 	<!-- 페이지네이션 -->
 	 <select id="getPosts" resultType="PostVO">
    SELECT p.*, f.*
    FROM (
        SELECT p.*, ROWNUM AS rnum
        FROM (
            SELECT *
            FROM posts
            WHERE board_id = #{postVO.boardId, jdbcType=INTEGER}
            <include refid="condition"/>
            ORDER BY post_id DESC
        ) p
        <![CDATA[
        WHERE ROWNUM <= #{endRow, jdbcType=INTEGER}
        ]]>
    ) p
    LEFT JOIN boardfiles f ON p.post_id = f.post_id
    WHERE p.rnum > #{startRow, jdbcType=INTEGER}
    ORDER BY p.rnum
    </select> 
    
    <!-- 게시글 개수 -->
    <select id="getPostCount" resultType="int">
        SELECT COUNT(*)
        FROM posts
        WHERE board_id = #{boardId}
        <if test = 'keyword != null and ! "".equals(keyword)'>
      		AND(title LIKE '%' || #{keyword} ||'%'
            OR post_content LIKE '%' || #{keyword} || '%'
            OR writer LIKE '%' || #{keyword} || '%' )
    	</if>
    </select>

	<sql id="condition">
	  <if test = 'postVO.keyword != null and ! "".equals(postVO.keyword)'>
      		AND(title LIKE '%' || #{postVO.keyword} ||'%'
            OR post_content LIKE '%' || #{postVO.keyword} || '%'
            OR writer LIKE '%' || #{postVO.keyword} || '%' )
      </if>
	</sql>
	
	<!-- <select id="MainpagePostList" resultType="PostVO">
	    SELECT POST_ID ,
               BOARD_ID ,
               USER_ID ,
               TITLE ,
               POST_CONTENT ,
               CREATE_DATE ,
               WRITER ,
               POST_VIEW ,
               POST_LIKE ,
               UPDATE_DATE 
        FROM posts
        WHERE board_id = {boardId}
        ORDER BY post_like DESC
    </select> -->
    
    <select id="getpostAll" resultType="PostVO">
    	    SELECT *
		    FROM (
		        SELECT p.POST_ID,
		               p.BOARD_ID,
		               p.USER_ID,
		               p.TITLE,
		               p.POST_CONTENT,
		               p.CREATE_DATE,
		               p.WRITER,
		               p.POST_VIEW,
		               p.POST_LIKE,
		               p.UPDATE_DATE,
		               b.boardfile_location,
		               b.boardfile_name,
		               COUNT(r.reply_id) AS reply_count,
		               COUNT(c.comment_id) AS comment_count,
		               COUNT(r.reply_id) + COUNT(c.comment_id) AS total_count
		        FROM posts p
		        LEFT JOIN replies r ON p.post_id = r.post_id
		        LEFT JOIN comments c ON r.reply_id = c.reply_id
		        LEFT JOIN boardfiles b ON p.post_id = b.post_id
		        GROUP BY p.POST_ID,
		                 p.BOARD_ID,
		                 p.USER_ID,
		                 p.TITLE,
		                 p.POST_CONTENT,
		                 p.CREATE_DATE,
		                 p.WRITER,
		                 p.POST_VIEW,
		                 p.POST_LIKE,
		                 p.UPDATE_DATE,
		                 b.boardfile_location,
		                 b.boardfile_name
		        ORDER BY p.create_date DESC)
		       <![CDATA[
		       WHERE ROWNUM <= 5
		       ]]>
		       AND board_id = #{boardId}
    </select>
</mapper>