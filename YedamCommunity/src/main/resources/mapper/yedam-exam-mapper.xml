<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.yedam_examteacher.mapper.ExamMapper">
	<!-- 시험목록 조회/등록 페이지======================================================= -->
	<!-- 시험목록 조회 (페이징,검색기능)-->
	<select id="selectExamAll" resultType="TeacherVO" parameterType="map">
	SELECT *   
	FROM (SELECT  rownum rn, b.*
	      FROM (SELECT test_id,
	                   t.curriculum_id,
	                   test_content,
	                   test_time,
	                   test_date,
	                   test_name,
	                   c.class_id           				  
	             FROM tests t JOIN curriculum c
	                               ON t.curriculum_id = c.curriculum_id) b                     
	             WHERE (LOWER(test_name) LIKE '%' || LOWER(#{searchQuery}) || '%')
	             <if test=" classId!=0 ">

	             AND class_id = #{classId}
	             </if> 
	             <![CDATA[
	             AND rownum <= (#{page} * 5)
	             ]]>
	             ORDER BY test_date DESC) a 
	WHERE a.rn > (#{page} - 1) * 5
	</select>
	<select id="testTotalCnt" parameterType="map" resultType="int">
		SELECT count(*)         				  
		FROM tests t JOIN curriculum c
		             ON t.curriculum_id = c.curriculum_id                   
		WHERE (test_name LIKE '%' || #{searchQuery} || '%')
		<if test=" cId!=0 ">
		AND c.class_id = #{cId}
		</if>
	</select>
	<!-- 시험 등록 -->
	<insert id="insertTest" parameterType="TeacherVO">
		INSERT INTO tests (test_id
						  , curriculum_id
						  , test_content
						  , test_time
						  , test_date
						  , test_name)
		VALUES (test_id_seq.nextval
				, #{curriculumId}
				, #{testContent}
				, #{testTime}
				, sysdate
				, #{testName})				  
	</insert>
	<!-- 시험에 출제되는 문제 등록 -->
	<insert id="insertQuizbox" parameterType="TeacherVO">
		INSERT INTO quizbox(quizbox_id
                  , quiz_content
                  , quiz_id
                  , test_id
                  , quiz_score)
		VALUES(quizbox_id_seq.nextval
		     , #{quizContent}
		     , #{quizId}
		     , test_id_seq.currval
		     , #{quizScore})
	</insert>
	<!-- 시험 대상자 등록 -->
	<insert id="insertTestUser" parameterType="TeacherVO">
		INSERT INTO test_targets(test_target_id
                       , test_id
                       , user_id)
		VALUES(test_target_id_seq.nextval
		     , test_id_seq.currval
		     , #{userId})
	</insert>
	<!-- 문제등록/조회 페이지======================================================= -->
	<!-- 문제 등록 -->
	<insert id="insertQuiz" parameterType="TeacherVO">
		INSERT INTO quizes (quiz_id
			  			  , subject_name
						  , quiz_content
						  , quiz_solution
						  , user_id
						  , quiz_answer
						  , subject_id)
		VALUES (quiz_id_seq.nextval
			  , #{subjectName}
			  , #{quizContent}
			  , #{quizSolution}
			  , #{userId}
			  , #{quizAnswer}
			  , #{subjectId})
	</insert>
	<insert id="insertQuizJu" parameterType="TeacherVO">
		INSERT INTO quizes (quiz_id
			  			  , subject_name
						  , quiz_content
						  , quiz_solution
						  , user_id
						  , quiz_answer
						  , subject_id)
		VALUES (quiz_id_seq.nextval
			  , #{subjectName}
			  , #{quizContentJu}
			  , #{quizSolutionJu}
			  , #{userId}
			  , #{quizAnswerJu}
			  , #{subjectId})
	</insert>
	<!-- 문제 지문 등록 -->
	<insert id="insertAnswer" parameterType="TeacherVO">
		INSERT INTO answers (text_id
			  			  , example_num
						  , text_content
						  , example_answer
						  , quiz_id
						  , subject_id
						  , quiz_answer)
		VALUES (text_id_seq.nextval
			  , 1
			  , #{textContent}
			  , #{exampleAnswer}
			  , quiz_id_seq.currval
			  , #{subjectId}
			  , #{quizAnswer})
	</insert>
	<insert id="insertAnswer2" parameterType="TeacherVO">
		INSERT INTO answers (text_id
			  			  , example_num
						  , text_content
						  , example_answer
						  , quiz_id
						  , subject_id
						  , quiz_answer)
		VALUES (text_id_seq.nextval
			  , 2
			  , #{textContent2}
			  , #{exampleAnswer2}
			  , quiz_id_seq.currval
			  , #{subjectId}
			  , #{quizAnswer})
	</insert>
	<insert id="insertAnswer3" parameterType="TeacherVO">
		INSERT INTO answers (text_id
			  			  , example_num
						  , text_content
						  , example_answer
						  , quiz_id
						  , subject_id
						  , quiz_answer)
		VALUES (text_id_seq.nextval
			  , 3
			  , #{textContent3}
			  , #{exampleAnswer3}
			  , quiz_id_seq.currval
			  , #{subjectId}
			  , #{quizAnswer})
	</insert>
	<insert id="insertAnswer4" parameterType="TeacherVO">
		INSERT INTO answers (text_id
			  			  , example_num
						  , text_content
						  , example_answer
						  , quiz_id
						  , subject_id
						  , quiz_answer)
		VALUES (text_id_seq.nextval
			  , 4
			  , #{textContent4}
			  , #{exampleAnswer4}
			  , quiz_id_seq.currval
			  , #{subjectId}
			  , #{quizAnswer})
	</insert>
	<insert id="insertAnswer5" parameterType="TeacherVO">
		INSERT INTO answers (text_id
			  			  , example_num
						  , text_content
						  , example_answer
						  , quiz_id
						  , subject_id
						  , quiz_answer)
		VALUES (text_id_seq.nextval
			  , 5
			  , #{textContent5}
			  , #{exampleAnswer5}
			  , quiz_id_seq.currval
			  , #{subjectId}
			  , #{quizAnswer})
	</insert>
	<insert id="insertAnswerJu" parameterType="TeacherVO">
		INSERT INTO answers (text_id
			  			  , example_num
						  , text_content
						  , example_answer
						  , quiz_id
						  , subject_id
						  , quiz_answer)
		VALUES (text_id_seq.nextval
			  , 1
			  , #{textContentJu}
			  , #{exampleAnswerJu}
			  , quiz_id_seq.currval
			  , #{subjectId}
			  , #{quizAnswer})
	</insert>
	<!-- 문제저장소에 문제 출력 -->
	<!-- <select id="filterQuiz" resultType="TeacherVO" parameterType="String">
		SELECT quiz_id
       		 , subject_name
       		 , quiz_content
       		 , quiz_solution
       		 , user_id
       		 , quiz_answer
       		 , subject_id
		FROM quizes
        <if test="sName != null and !sName.equals('') and !sName.equals('all') ">
        WHERE subject_name = #{sName}
        </if>        
		ORDER BY quiz_id DESC
	</select> -->
	<select id="filterQuiz" resultType="TeacherVO" parameterType="map">
		SELECT *
		FROM (SELECT rownum rn, b.*
		      FROM (SELECT quiz_id
			       		 , subject_name
			       		 , quiz_content
			       		 , quiz_solution
			       		 , user_id
			       		 , quiz_answer
			       		 , subject_id
		            FROM quizes) b
		            <![CDATA[
		            Where rownum <= (#{page} * 9)     
		            ]]>
		            <if test="subjectName != null and !subjectName.equals('') and !subjectName.equals('all') ">
		            AND subject_name = #{subjectName}
		            </if>
		            ORDER BY quiz_id DESC) a
		WHERE a.rn > (#{page} - 1) * 9
	</select>
	<!-- 문제 개수 count -->
	<select id="getQuizCnt" resultType="int" parameterType="map">
		SELECT COUNT(*)
        FROM quizes
        <if test="subjectName != null and !subjectName.equals('') and !subjectName.equals('all') ">
        WHERE subject_name = #{subjectName}
        </if>
	</select>
	<!-- 문제저장소에 지문 출력 -->
	<select id="selectAnswerAll" resultType="TeacherVO">
		SELECT example_num||'. '||text_content as text_content
			  , quiz_id
		FROM answers
		WHERE quiz_id = #{quizId}
		ORDER BY example_num      
	</select>
	<select id="quizAnswer" resultType="TeacherVO" parameterType="int">
		SELECT example_num||'. '||text_content as text_content
		FROM answers
		WHERE quiz_id = #{qId}
		ORDER BY example_num    
	</select>
	<!-- 문제 단건조회 -->
	<select id="selectQuiz" resultType="TeacherVO">
		SELECT quiz_id
		      , quiz_content
		      , quiz_solution
		FROM quizes
		WHERE quiz_id = #{quizId}
	</select>
	<select id="infoQuiz" resultType="TeacherVO" parameterType="int">
		SELECT quiz_id
		      , quiz_content
		      , quiz_solution
		FROM quizes
		WHERE quiz_id = #{qId}
	</select>
	<!-- 과정명 출력(과정이 먼저 선택되어야 과정명을 뽑을수있다.) -->
	<select id="selectCurr" resultType="TeacherVO">
		SELECT curriculum_name
			 , curriculum_id
     		 , class_id
		FROM curriculum
		WHERE is_complete = 2
		ORDER BY class_id
	</select>
	<!-- 과목명 출력(문제 필터링용) -->
	<select id="selectSubjectAll" resultType="TeacherVO">
		SELECT DISTINCT subject_name
		FROM subjects
		ORDER BY subject_name
	</select>
	<!-- 과목명 출력(과목명 삭제를 위해) -->
	<select id="subjectOfCurr" resultType="TeacherVO" parameterType="int">
		SELECT subject_name 
		     , subject_id
		     , curriculum_id
		FROM subjects
		WHERE curriculum_id = #{curriId}
	</select>
	<!-- 과목명 추가 -->
	<insert id="insertSubject" parameterType="TeacherVO">
		INSERT INTO subjects(subject_id
						   , subject_name
						   , curriculum_id)
		VALUES (subject_id_seq.nextval
        		, #{subjectName}
        		, #{curriculumId})
	</insert>
	<!-- 과목명 삭제 -->
	<delete id="deleteSubject" parameterType="TeacherVO">
		DELETE FROM subjects
		WHERE subject_name = #{subjectName}
		AND curriculum_id = #{curriculumId}
	</delete>
	
	<!-- 유저 정보 출력(시험 대상자) -->
	<select id="selectUserAll" resultType="TeacherVO">
		SELECT user_id
		     , name
		     , tel
		     , email
		     , address
		     , user_image
		     , company_info
		     , user_type
		     , curriculum_id
		FROM users
		WHERE curriculum_id = #{curriculumId}
	</select>
	
	<!-- 강의실별 과목평균점수 조회 -->
	<select id="subjectAvg" resultType="TeacherVO" parameterType="int">
		SELECT s.subject_name
		     , c.class_id 
		     , (select AVG(quiz_score)
		        from quizbox q JOIN exam_results e
		                         ON q.quizbox_id = e.quizbox_id
		                       JOIN test_results t
		                         ON t.quiz_id = e.quiz_id) AS subject_avg
		FROM subjects s JOIN curriculum c 
		                  ON s.curriculum_id = c.curriculum_id
		WHERE class_id = #{classId}
		AND is_complete = 2
	</select>
	
	<!-- 강의실별 시험리스트 조회 -->
	<select id="testList" resultType="TeacherVO" parameterType="int">
		SELECT t.test_name
		     , t.test_date
		     , t.test_id
		     , c.class_id
		     , c.curriculum_name
		     , c.curriculum_start_date
			 , c.curriculum_end_date
		FROM tests t JOIN curriculum c
		               ON t.curriculum_id = c.curriculum_id
		WHERE c.class_id = #{classId}
	</select>
	<!-- 강의실별 시험리스트 단건조회 -->
	<select id="testInfo" resultType="TeacherVO">
		SELECT t.test_name
		     , t.test_date
		     , t.test_id
		     , c.class_id
		     , c.curriculum_name
		     , c.curriculum_start_date
			 , c.curriculum_end_date
		FROM tests t JOIN curriculum c
		               ON t.curriculum_id = c.curriculum_id
		WHERE test_id = #{testId}
	</select>
	<!-- 강의실별 수강생 조회 -->
	<select id="userList" resultType="TeacherVO" parameterType="int">
		SELECT name
		     , class_id
		     , user_id
		FROM users u JOIN curriculum c
		               ON u.curriculum_id = c.curriculum_id
		WHERE class_id = #{classId}
		AND is_complete = 2
	</select>
	
	<!-- 강의실별 과정명 조회 -->
	<select id="currList" resultType="TeacherVO" parameterType="int">
		SELECT curriculum_name
			  , class_id
			  , curriculum_start_date
			  , curriculum_end_date
		FROM curriculum
		WHERE class_id = #{classId}
		AND is_complete = 2
	</select>
	
	<!-- testId기준 수강생 시험 결과 출력 -->
	<select id="testResult" resultType="TeacherVO" parameterType="int">
		SELECT e.result_score
		     , e.is_reexam
		     , e.feedback
		     , u.name
		     , u.user_id
		     , t.test_id
		FROM exam_results e JOIN test_targets t
		                    ON e.test_target_id = t.test_target_id
		                    JOIN users u
		                    ON t.user_id = u.user_id
		WHERE test_id = #{testId}
	</select>
	
	<!-- 학생 개인의 과목(시험)별 점수 확인 -->
	<select id="userTestInfo" resultType="TeacherVO">
		SELECT name
			 , user_id
		     , user_image
		     , curriculum_name
		     , curriculum_start_date
		     , curriculum_end_date
		FROM users u JOIN curriculum c
		               ON c.curriculum_id = u.curriculum_id
		WHERE user_id = #{userId}
	</select>
	<select id="userScore" resultType="TeacherVO" parameterType="int">
		SELECT subject_name
		     , result_score
		     , user_id
		FROM subjects s JOIN exam_results e
		                 ON s.subject_id = e.subject_id
		                JOIN test_targets t
		                 ON e.test_target_id = t.test_target_id
		WHERE user_id = #{userId}
	</select>
	
	<!-- 학생 개인 피드팩 페이지 기능 모음 -->
	<!-- 유저 시험 정보 출력 -->
	<select id="userFeed" resultType="TeacherVO">
		SELECT e.result_score
			 , e.is_reexam
			 , e.feedback
			 , u.name
	         , test_id
	         , e.subject_id
	         , e.result_id
		FROM exam_results e JOIN test_targets t
			                  ON e.test_target_id = t.test_target_id
			                JOIN users u
			                  ON t.user_id = u.user_id
		WHERE u.user_id = #{userId}
	</select>
	<!-- 피드백 내용 삽입(수정) -->
	<update id="feedAdd" parameterType="TeacherVO">
		UPDATE exam_results
		SET feedback = #{feedback}
		WHERE result_id = #{resultId}
	</update>

</mapper>	