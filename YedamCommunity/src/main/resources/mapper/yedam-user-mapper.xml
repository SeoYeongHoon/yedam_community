<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.yedam_user.mapper.UserMapper">
	
	<!-- Spring Security용 유저 찾기 -->
	<select id="getByUserId" resultType="UserVO">
		SELECT * 
		FROM users
		WHERE id = #{id}
	</select>
	
	<!-- 로그인 -->
	<select id="userLogin" resultType="UserVO">
		SELECT *
		FROM users
		WHERE id = #{id}
		AND password = #{password}
	</select>
	
	<!-- 아이디찾기 -->
	<select id="getUserId" resultType="UserVO">
		SELECT *
		FROM users
		WHERE name = #{name}
		AND email = #{email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="getUserPw" parameterType="UserVO">
		SELECT password
		FROM users
		WHERE id = #{id}
		AND name = #{name}
		AND email = #{email}
	</select>
	
	<!-- 회원가입 신청 거절(삭제) -->
	<delete id="refuseUser" parameterType="int">
		DELETE register
		WHERE register_id = #{registerId}
	</delete>
	
	<!-- 유저 삭제 -->
	<delete id="removeUser" parameterType="int">
		DELETE users
		WHERE user_id = #{userId}
	</delete>
	
	<!-- 관리자페이지 첫 페이지(회원가입 신청한 유저) -->
	<select id="selectStdList" resultType="RegisterVO">
		SELECT register_id
			 , user_type
			 , name
			 , tel
			 , email
		FROM register
		WHERE user_type = 'ROLE_GRAD' OR user_type = 'ROLE_LEARN'
		ORDER BY register_id
	</select>
	
	<!-- 관리자페이지 유저 리스트 출력 및 필터링 -->
	<select id="getUsersByFilter" parameterType="map" resultType="UserVO">
		SELECT * 
	    FROM (
	        SELECT rownum rn, b.*, c.curriculum_start_date, c.curriculum_end_date
	        FROM users b JOIN curriculum c ON (b.curriculum_name = c.curriculum_name)
	        <choose>
                <when test="filter == 'showAll'">
                    AND (user_type = 'ROLE_GRAD' OR user_type = 'ROLE_LEARN' OR user_type = 'ROLE_ADMIN')
                    AND (name LIKE '%' || #{searchQuery} || '%')
                </when>
                <otherwise>
                    AND c.curriculum_id = #{filter}
                    AND (user_type = 'ROLE_GRAD' OR user_type = 'ROLE_LEARN')
                    AND (name LIKE '%' || #{searchQuery} || '%')
                </otherwise>
            </choose>
	        AND 
	        <![CDATA[
		    rownum <= (#{page} * 5)
		    ]]>
		    AND (name LIKE '%' || #{searchQuery} || '%')
	    ) a
	    WHERE a.rn > (#{page} - 1) * 5
	</select>
	
	<select id="getTotalCnt" parameterType="map" resultType="int">
		SELECT COUNT(*)
        FROM users b JOIN curriculum c ON (b.curriculum_name = c.curriculum_name)
        <where>
            <choose>
                <when test="filter == 'showAll'">
                    AND (user_type = 'ROLE_GRAD' OR user_type = 'ROLE_LEARN')
                    AND (name LIKE '%' || #{searchQuery} || '%')
                </when>
                <otherwise>
                    AND c.curriculum_id = #{filter}
                    AND (user_type = 'ROLE_GRAD' OR user_type = 'ROLE_LEARN')
                    AND (name LIKE '%' || #{searchQuery} || '%')
                </otherwise>
            </choose>
        </where>
	</select>
	
	<update id="approveUser" parameterType="UserVO">
	    BEGIN
	        INSERT INTO users (
	            user_id
	            , id
	            , password
	            , name
	            , tel
	            , email
	            , address
	            , company_info
	            , user_type
	            , curriculum_name
	            , profile_image_name
				, profile_image_size
				, profile_image_location
				, download_location
				, profile_image_ext
	        )
	        SELECT user_id_seq.NEXTVAL
	            , id
	            , password
	            , name
	            , tel
	            , email
	            , address
	            , company_info
	            , user_type
	            , curriculum_name
	            , profile_image_name
				, profile_image_size
				, profile_image_location
				, download_location
				, profile_image_ext
	        FROM register
	        WHERE register_id = #{registerId};
	
	        DELETE FROM register
	        WHERE register_id = #{registerId};
	    END;
	</update>
	
	<update id="insertCheckedUsers" parameterType="java.util.Map">
	    BEGIN
	        FOR i IN (SELECT register_id 
			                , id
			                , password
			                , name
			                , tel
			                , email
			                , address
			                , company_info
			                , user_type
				            , curriculum_name
				            , profile_image_name
							, profile_image_size
							, profile_image_location
							, download_location
							, profile_image_ext
	                FROM register
	                WHERE register_id IN
	                <foreach item="registerId" collection="registerIds" open="(" separator="," close=")">
	                    #{registerId}
	                </foreach>
	                )
	        LOOP
	            INSERT INTO users (user_id
	                             , id
	                             , password
	                             , name
	                             , tel
	                             , email
	                             , address
	                             , company_info
	                             , user_type
					             , curriculum_name
					             , profile_image_name
								 , profile_image_size
								 , profile_image_location
								 , download_location
								 , profile_image_ext
	                             )
	            VALUES (user_id_seq.NEXTVAL
	                  , i.id
	                  , i.password
	                  , i.name
	                  , i.tel
	                  , i.email
	                  , i.address
	                  <!-- , i.user_image -->
	                  , i.company_info
	                  , i.user_type
		              , i.curriculum_name
		              , i.profile_image_name
					  , i.profile_image_size
					  , i.profile_image_location
					  , i.download_location
					  , i.profile_image_ext
	            );
	            
	            DELETE FROM register
	            WHERE register_id = i.register_id;
	        END LOOP;
	    END;
	</update>


	<!-- 회원가입 프로세스 -->
	<!-- 관리자가 csv파일을 기반으로 학생 정보 임시 저장 -->
    <insert id="insertTempUsers" parameterType="map">
        INSERT INTO tempusers (name, tel, email)
        VALUES (#{stdName}, #{stdPhone}, #{stdEmail})
    </insert>

	<!-- 회원가입 시, 정보를 임시정보(tempusers)와 비교 -->
    <select id="checkTempUser" parameterType="UserVO" resultType="UserVO">
        SELECT * FROM tempusers
        WHERE name  = #{name}
        AND   tel   = #{tel}
        AND   email = #{email}
    </select>

	<!-- 정보 일치 시, users 테이블에 저장 -->
    <insert id="insertUser" parameterType="UserVO">
        INSERT INTO users (user_id,
		                   id,
		                   password,
		                   name,
		                   tel,
		                   email,
		                   address,
		                   company_info,
		                   user_type,
		                   curriculum_name,
		                   profile_image_name,
		                   profile_image_size,
		                   profile_image_location,
		                   download_location,
		                   profile_image_ext)
        VALUES (  user_id_seq.NEXTVAL
				, #{id}
				, #{password}
				, #{name}
				, #{email}
				, #{tel}
				, #{address}
				, #{companyInfo}
				, #{userType}
				, #{curriculumName}
				, #{profileImageName}
				, #{profileImageSize}
				, #{profileImageLocation}
				, #{downloadLocation}
				, #{profileImageExt}
		)
    </insert>

	<!-- 정보 불일치 시, register 테이블에 저장 -->
    <insert id="insertRegister" parameterType="UserVO">
        INSERT INTO register (register_id
							, id
							, password
							, name
							, email
							, tel
							, address
							, company_info
							, user_type
							, curriculum_name
							, profile_image_name
							, profile_image_size
							, profile_image_location
							, download_location
							, profile_image_ext) 
		VALUES (  user_id_seq.NEXTVAL
				, #{id}
				, #{password}
				, #{name}
				, #{email}
				, #{tel}
				, #{address}
				, #{companyInfo}
				, #{userType}
				, #{curriculumName}
				, #{profileImageName}
				, #{profileImageSize}
				, #{profileImageLocation}
				, #{downloadLocation}
				, #{profileImageExt}
		)
    </insert>

	
    <!-- <update id="updateRegisterStatus" parameterType="map">
        UPDATE register
        SET status = #{status}
        WHERE id = #{id}
    </update> -->
    
    <!-- 회원정보 수정 -->
    <!--<update id="updateUserInfo" parameterType="UserVO">
		UPDATE users
		SET name = #{name},
			password = #{password},
			email = #{email},
			tel = #{tel},
			profile_image_name = #{profileImageName},
			profile_image_location = #{profileImageLocation},
			profile_image_size = #{profileImageSize},
			download_location = #{downloadLocation},
			profile_image_ext = #{profileImageExt}
		WHERE id = #{id}
	</update>-->
	<update id="updateUserInfo" parameterType="UserVO">
	    UPDATE users
	    <set>
	        <if test="name != null">name = #{name},</if>
	        <if test="password != null">password = #{password},</if>
	        <if test="email != null">email = #{email},</if>
	        <if test="tel != null">tel = #{tel},</if>
	        <if test="profileImageName != null">profile_image_name = #{profileImageName},</if>
	        <if test="profileImageLocation != null">profile_image_location = #{profileImageLocation},</if>
	        <if test="profileImageSize != null">profile_image_size = #{profileImageSize},</if>
	        <if test="downloadLocation != null">download_location = #{downloadLocation},</if>
	        <if test="profileImageExt != null">profile_image_ext = #{profileImageExt},</if>
	    </set>
	    WHERE id = #{id}
	</update>
	
	<!-- 수강생 => 수료생으로 자동 변경 -->
	<update id="updateUserType" parameterType="UserVO">
		UPDATE users
		SET user_type = 'ROLE_GRAD'
		WHERE curriculum_id IN (SELECT curriculum_id
		                        FROM curriculum
		                        WHERE curriculum_end_date 
		                        <![CDATA[
		                        <
		                        ]]>
		                        SYSDATE)
	</update>
</mapper>